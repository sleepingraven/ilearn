<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="carry.ilearn.dao.CommentDao">
	<resultMap id="BaseResultMap" type="carry.ilearn.dataobject.CommentDO">
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="level" jdbcType="INTEGER" property="level" />
		<result column="statement_id" jdbcType="INTEGER" property="statementId" />
		<result column="reply_to_id" jdbcType="INTEGER" property="replyToId" />
		<result column="root_id" jdbcType="INTEGER" property="rootId" />
		<association property="statementDO" column="statement_id" javaType="carry.ilearn.dataobject.StatementDO"
		             select="carry.ilearn.dao.StatementDao.selectByPrimaryKey" />
	</resultMap>
	<resultMap id="FirstLevelResultMap" type="carry.ilearn.dataobject.CommentFirstLevelDO">
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="level" jdbcType="INTEGER" property="level" />
		<result column="statement_id" jdbcType="INTEGER" property="statementId" />
		<result column="reply_to_id" jdbcType="INTEGER" property="replyToId" />
		<result column="root_id" jdbcType="INTEGER" property="rootId" />
		<association property="statementDO" column="statement_id" javaType="carry.ilearn.dataobject.StatementDO"
		             select="carry.ilearn.dao.StatementDao.selectByPrimaryKey" />
		<association property="count" column="id" javaType="java.lang.Long"
		             select="carry.ilearn.dao.CommentDao.selectSecondLevelCountByCommentId" />
		<collection property="commentDOList"
		            column="{ commentId=id, offset=secondOffset, limit=secondLimit }"
		            select="carry.ilearn.dao.CommentDao.selectSecondLevelByCommentIdPaged" />
	</resultMap>
	<sql id="Base_Column_List">
		id, `level`, statement_id, reply_to_id, root_id
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from comment
		where id = #{id,jdbcType=INTEGER}
	</select>
	<select id="selectFirstLevelByPostIdPaged" resultMap="FirstLevelResultMap">
		select
			id,
			`level`,
			statement_id,
			reply_to_id,
			root_id,
			#{secondOffset,jdbcType=INTEGER} secondOffset,
			#{secondLimit,jdbcType=INTEGER}  secondLimit
		from
			comment
		where
			  reply_to_id = #{postId,jdbcType=INTEGER}
		  and level = 1
		limit #{offset,jdbcType=INTEGER}, #{limit,jdbcType=INTEGER}
	</select>
	<select id="selectSecondLevelByCommentIdPaged" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from comment
		where root_id = #{commentId,jdbcType=INTEGER}
		limit #{offset,jdbcType=INTEGER}, #{limit,jdbcType=INTEGER}
	</select>
	<select id="selectSecondLevelCountByCommentId" resultType="java.lang.Long">
		select
			count(*)
		from
			comment
		where
			root_id = #{commentId,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete
		from
			comment
		where
			id = #{id,jdbcType=INTEGER}
	</delete>
	<insert id="insert" keyColumn="id" keyProperty="id" parameterType="carry.ilearn.dataobject.CommentDO"
	        useGeneratedKeys="true">
		insert into comment
			(`level`, statement_id, reply_to_id,
			 root_id)
		values
			(#{level,jdbcType=INTEGER}, #{statementId,jdbcType=INTEGER}, #{replyToId,jdbcType=INTEGER},
			 #{rootId,jdbcType=INTEGER})
	</insert>
	<insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="carry.ilearn.dataobject.CommentDO"
	        useGeneratedKeys="true">
		insert into comment
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="level != null">
				`level`,
			</if>
			<if test="statementId != null">
				statement_id,
			</if>
			<if test="replyToId != null">
				reply_to_id,
			</if>
			<if test="rootId != null">
				root_id,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="level != null">
				#{level,jdbcType=INTEGER},
			</if>
			<if test="statementId != null">
				#{statementId,jdbcType=INTEGER},
			</if>
			<if test="replyToId != null">
				#{replyToId,jdbcType=INTEGER},
			</if>
			<if test="rootId != null">
				#{rootId,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="carry.ilearn.dataobject.CommentDO">
		update comment
		<set>
			<if test="level != null">
				`level` = #{level,jdbcType=INTEGER},
			</if>
			<if test="statementId != null">
				statement_id = #{statementId,jdbcType=INTEGER},
			</if>
			<if test="replyToId != null">
				reply_to_id = #{replyToId,jdbcType=INTEGER},
			</if>
			<if test="rootId != null">
				root_id = #{rootId,jdbcType=INTEGER},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="carry.ilearn.dataobject.CommentDO">
		update comment
		set `level`      = #{level,jdbcType=INTEGER},
		    statement_id = #{statementId,jdbcType=INTEGER},
		    reply_to_id  = #{replyToId,jdbcType=INTEGER},
		    root_id      = #{rootId,jdbcType=INTEGER}
		where
			id = #{id,jdbcType=INTEGER}
	</update>
</mapper>
