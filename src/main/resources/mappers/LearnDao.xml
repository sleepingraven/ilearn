<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="carry.ilearn.dao.LearnDao">
	<resultMap id="BaseResultMap" type="carry.ilearn.dataobject.LearnDO">
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="status" jdbcType="INTEGER" property="status" />
		<result column="achieve_time" jdbcType="TIMESTAMP" property="achieveTime" />
		<result column="user_id" jdbcType="INTEGER" property="userId" />
		<result column="section_id" jdbcType="INTEGER" property="sectionId" />
	</resultMap>
	<resultMap id="LearnAchieveResultMap" type="carry.ilearn.dataobject.LearnAchieveDO">
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="status" jdbcType="INTEGER" property="status" />
		<result column="achieve_time" jdbcType="TIMESTAMP" property="achieveTime" />
		<result column="user_id" jdbcType="INTEGER" property="userId" />
		<result column="section_id" jdbcType="INTEGER" property="sectionId" />
		<association property="sectionDO" column="section_id" javaType="carry.ilearn.dataobject.SectionDO"
		             select="carry.ilearn.dao.SectionDao.selectByPrimaryKey" />
		<association property="courseDO" column="courseId" javaType="carry.ilearn.dataobject.CourseDO"
		             select="carry.ilearn.dao.CourseDao.selectByPrimaryKey" />
		<association property="learnProcessDO" column="{ userId=user_id, courseId=courseId }"
		             javaType="carry.ilearn.dataobject.LearnProcessDO"
		             select="carry.ilearn.dao.LearnDao.selectLearnProcessDO" />
	</resultMap>
	<sql id="Base_Column_List">
		id, `status`, achieve_time, user_id, section_id
	</sql>
	<select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from learn
		where id = #{id,jdbcType=INTEGER}
	</select>
	<select id="checkUserLearn" resultType="java.lang.Boolean">
		select
			exists(
					select *
					from
						learn
					where
						  user_id = #{userId,jdbcType=INTEGER}
					  and section_id = #{sectionId,jdbcType=INTEGER}
				)
	</select>
	<select id="selectUserLearnAchievePaged" resultMap="LearnAchieveResultMap">
		select
			id,
			`status`,
			achieve_time,
			user_id,
			section_id,
			targetLearnAndCourse.courseId
		from
			learn
				join
				(select
					 max(learn.id) learnId,
					 course.id     courseId
				 from
					 learn
						 join section on learn.section_id = section.id
						 join chapter on section.chapter_id = chapter.id
						 join course on chapter.course_id = course.id
				 where
					   learn.user_id = #{userId,jdbcType=INTEGER}
				   and course.banned = false
				 group by course.id
				 limit #{offset,jdbcType=INTEGER}, #{limit,jdbcType=INTEGER}
				) targetLearnAndCourse
					on learn.id = targetLearnAndCourse.learnId
		order by achieve_time desc
	</select>
	<select id="selectUserLearnAchieveCount" resultType="java.lang.Long">
		select
			count(distinct course.id)
		from
			learn
				join section on learn.section_id = section.id
				join chapter on section.chapter_id = chapter.id
				join course on chapter.course_id = course.id
		where
			  learn.user_id = #{userId,jdbcType=INTEGER}
		  and course.banned = false
	</select>
	<select id="selectLearnProcessDO" resultType="carry.ilearn.dataobject.LearnProcessDO">
		select
			count(section.id) totalTasks,
			count(learn.id)   finishedTasks
		from
			section
				join      chapter ON section.chapter_id = chapter.id
				left join learn ON learn.user_id = #{userId,jdbcType=INTEGER} and learn.section_id = section.id
		WHERE
			chapter.course_id = #{courseId,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete
		from
			learn
		where
			id = #{id,jdbcType=INTEGER}
	</delete>
	<insert id="insert" keyColumn="id" keyProperty="id" parameterType="carry.ilearn.dataobject.LearnDO"
	        useGeneratedKeys="true">
		insert into learn
			(`status`, achieve_time, user_id,
			 section_id)
		values
			(#{status,jdbcType=INTEGER}, #{achieveTime,jdbcType=TIMESTAMP}, #{userId,jdbcType=INTEGER},
			 #{sectionId,jdbcType=INTEGER})
	</insert>
	<insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="carry.ilearn.dataobject.LearnDO"
	        useGeneratedKeys="true">
		insert into learn
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="status != null">
				`status`,
			</if>
			<if test="achieveTime != null">
				achieve_time,
			</if>
			<if test="userId != null">
				user_id,
			</if>
			<if test="sectionId != null">
				section_id,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="status != null">
				#{status,jdbcType=INTEGER},
			</if>
			<if test="achieveTime != null">
				#{achieveTime,jdbcType=TIMESTAMP},
			</if>
			<if test="userId != null">
				#{userId,jdbcType=INTEGER},
			</if>
			<if test="sectionId != null">
				#{sectionId,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<insert id="insertUserLearn">
		insert into learn(status, section_id, user_id)
		values
			(#{status,jdbcType=INTEGER}, #{sectionId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER})
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="carry.ilearn.dataobject.LearnDO">
		update learn
		<set>
			<if test="status != null">
				`status` = #{status,jdbcType=INTEGER},
			</if>
			<if test="achieveTime != null">
				achieve_time = #{achieveTime,jdbcType=TIMESTAMP},
			</if>
			<if test="userId != null">
				user_id = #{userId,jdbcType=INTEGER},
			</if>
			<if test="sectionId != null">
				section_id = #{sectionId,jdbcType=INTEGER},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="carry.ilearn.dataobject.LearnDO">
		update learn
		set `status`     = #{status,jdbcType=INTEGER},
		    achieve_time = #{achieveTime,jdbcType=TIMESTAMP},
		    user_id      = #{userId,jdbcType=INTEGER},
		    section_id   = #{sectionId,jdbcType=INTEGER}
		where
			id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateUserLearn">
		update learn
		set `status` = #{status,jdbcType=INTEGER}
		where
			  user_id = #{userId,jdbcType=INTEGER}
		  and section_id = #{sectionId,jdbcType=INTEGER}
		  and status &lt; #{status,jdbcType=INTEGER}
	</update>
</mapper>
